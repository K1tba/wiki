История 1. Анализ и оптимизация производительности формирования отчетов

Описание истории:
В рамках данной истории необходимо разобраться с медленным выполнением отчетов, использующих объект TicketList. Выявлено, что время формирования отчетов растё экспоненциально в зависимости от количества затрагиваемых заявок. Задачей является детальный анализ текущего алгоритма выборки и обработки данных, поиск узких мест, оптимизация запросов и алгоритмов, а также валидация исправлений под нагрузкой.

Задачи:

Анализ проблемы и выявление причины (Исследование):
Провести анализ текущего механизма формирования отчетов, просмотреть исходный код выполнения объекта TicketList и использовать профилировщики для определения узких мест.
Просмотреть логи и собрать статистику временных задержек по различным частям отчёта.
Составить карту работы алгоритма, определить зависимости времени выполнения от объёма обрабатываемых данных.

Устранение проблемы (Оптимизация):
На основании результатов анализа внести правки в алгоритм запроса и обработки данных: оптимизировать SQL-запросы, внедрить индексацию, кэширование или оптимизировать логику выборки, если возможно.
При необходимости пересмотреть структуру самого объекта TicketList, возможно, перенести часть обработки на предварительный этап формирования отчётов или реализовать асинхронную обработку.

Тестирование (Нагрузочное и функциональное тестирование):
Разработать сценарии тестирования, которые включают нагрузочное тестирование с увеличенным количеством заявок для проверки корректности и производительности.
Провести профилирование после внесённых изменений, сравнить результаты с предыдущей версией, убедившись в линейном или приемлемом росте времени формирования отчетов.
Провести регрессионное тестирование для проверки, что внесённые изменения не повлияли на корректность формирования данных.

Поставка изменений в продуктивную среду (Деплой и мониторинг):
Скоординировать развёртывание исправлений на тестовом сервере с последующим выпуском в продуктив.
Предусмотреть мониторинг производительности после обновления, настроить сбор метрик и логирование, чтобы оперативно выявлять возможные откаты или новые проблемы.





История 2. Выявление и устранение утечки памяти в объекте TicketList

Описание истории:
Цель данной истории – обнаружить и устранить утечку памяти, возникающую в модуле отчетности OTRS 6 при работе с объектом TicketList. Утечка может приводить к сбоям в работе системы при выполнении больших отчётов. Необходимо детально проанализировать работу кода, воспроизвести ошибку, локализовать проблемный участок, внести исправления и подтвердить их эффективность с помощью тестирования.

Задачи:

Анализ проблемы и выявление причины (Диагностика):
Провести профильное тестирование с использованием инструментов анализа памяти (например, valgrind, Devel::Leak в Perl или подобного инструмента, соответствующего языку реализации).
Определить участок кода или конкретные методы объекта TicketList, где наблюдается рост потребления памяти.
Составить подробный отчёт с выявленными закономерностями, проанализировать жизненный цикл объектов внутри модуля.

Устранение проблемы (Рефакторинг и исправление утечек):
На основании полученных данных внести изменения в код: исправить неправильное управление памятью, обеспечить корректное уничтожение создаваемых объектов, если используются ссылки или кэширование, пересмотреть механизм сборки мусора.
Провести ручной рефакторинг проблемных участков, при необходимости переписать функционал с учетом рекомендаций по оптимальному расходу памяти.

Тестирование (Проверка исправлений и профилирование памяти):
Разработать автоматизированные тесты, воспроизводящие ситуацию с высокой нагрузкой и большим количеством заявок, для наблюдения за потреблением памяти.
Провести долгосрочное тестирование, чтобы удостовериться, что после исправления утечка больше не наблюдается.
Сравнить отчёты профилирования до и после исправлений, документировать достигнутый эффект.

Поставка изменений в продуктивную среду (Внедрение и мониторинг):
Организовать развёртывание обновленного модуля сначала на тестовой среде, с последующим выпуском в продуктив после положительных результатов тестирования.
Настроить мониторинг оперативного использования памяти системой, чтобы оперативно отслеживать возможные проблемы с утечкой и обновить инструменты диагностики.





История 3. Замена модуля парсинга email-адресов в ядре OTRS 6
Описание истории:
В текущей реализации ядра OTRS 6 для разбора email-адресов используется пакет Mail::Address. Однако с целями повышения производительности, уменьшения потребления памяти и повышения устойчивости к особенностям формирования адресов, предлагается заменить его на модуль Email::Address::XS. Предполагается, что новая библиотека обеспечит ускоренное парсирование адресов примерно в 2–3 раза быстрее, а также снизит нагрузку по памяти до 50% по сравнению с устаревшей реализацией. Новая реализация позволит более стабильно обрабатывать сложные и редко встречающиеся варианты адресации.

Задачи:

Анализ текущей реализации:
Произвести аудит использования Mail::Address в ядре, изучить особенности и типичные ошибки, возникающие при парсинге email-адресов. Продумать, в каких участках кода требуется внесение изменений, чтобы обеспечить совместимость с новой библиотекой.
Изучение функционала Email::Address::XS:
Подробно изучить документацию и примеры применения Email::Address::XS, сравнить с текущим поведением Mail::Address. Провести оценку потенциальных рисков несовместимости и выявить особенности, требующие адаптации в ядре OTRS 6.

Проектирование адаптационного слоя:
При необходимости разработать адаптационный слой или обёртку для обеспечения совместимости вызовов между Mail::Address и Email::Address::XS, чтобы минимизировать влияние на существующий функционал, использующий разбирание email-адресов.

Замена и внедрение нового модуля:
Реализовать замену с подробным тестированием каждого участка, где использовался Mail::Address. Обеспечить корректность и стабильность работы модуля после замены, внеся все необходимые изменения в интеграционные точки ядра.

Разработка и проведение модульных и интеграционных тестов:
Создать набор тестов, позволяющих валидировать корректность разбора адресов с использованием Email::Address::XS, включая обработку граничных случаев (например, форматы, содержащие экзотические символы или нестандартное представление).

Бенчмаркинг и оценка производительности:
Провести сравнительный анализ производительности и потребления памяти до и после внедрения нового модуля. Ожидается, что время обработки email-адресов улучшится в 2–3 раза, а потребление оперативной памяти снизится на 40–50%.

Документация и ревью кода:
Обновить документацию проекта с описанием новой реализации, преимуществ и особенностей работы Email::Address::XS. Провести код-ревью с участием команды, собрать обратную связь и внести корректировки при необходимости.





История 2. Расширение метода Delta в Kernel::System::DateTime с поддержкой TimeMoment
Описание истории:
В модуле Kernel::System::DateTime имеется метод Delta, отвечающий за вычисление разницы между датами. В рамках улучшения функциональности, предлагается добавить опциональную зависимость от модуля TimeMoment и расширить логику метода. При наличии установленного TimeMoment и передаче параметра ForWorkingTime должна активироваться дополнительная альтернативная логика расчёта, оптимизированная для расчёта рабочих часов и дней. Ожидается, что применение TimeMoment позволит ускорить вычисления в тех сценариях, где требуется учёт рабочих периодов, обеспечивая до 3–4 раз более быструю обработку и снижение использования ресурсов, а также более точное учёт расписания рабочего времени.

Задачи:

Анализ текущей реализации метода Delta:
Изучить существующую реализацию метода, выявить основные узкие места, определить алгоритмическую сложность и особенности расчёта разницы дат без учёта рабочего времени. Подготовить описание текущего поведения метода.

Анализ возможностей TimeMoment:
Исследовать функциональные возможности модуля TimeMoment, определить, каким образом он может заменить или дополнить существующий алгоритм расчёта разницы между датами с учётом рабочих часов и дней. Изучить примеры использования и оценить потенциальный прирост производительности.

Проектирование расширения метода:
Спроектировать механизм условного переключения, который при наличии установленного TimeMoment и при передаче параметра ForWorkingTime активирует альтернативную логику. Обеспечить, чтобы интеграция была максимально прозрачной для остальной системы и не нарушала обратную совместимость.

Реализация альтернативного логического блока:
Разработать дополнительный обработчик для метода Delta, использующий TimeMoment. Реализовать функционал так, чтобы при использовании параметра ForWorkingTime алгоритм выполнялся с оптимизированными расчётами, снижая время исполнения до 25–33% от времени традиционного алгоритма.

Обеспечение обратной совместимости:
Добавить проверки наличия установленного TimeMoment. Если модуль недоступен, метод должен автоматически использовать традиционную логику, гарантируя стабильную работу системы без дополнительных зависимостей.

Разработка тестовых кейсов для обоих вариантов логики:
Создать подробный набор модульных и интеграционных тестов, покрывающих стандартный и альтернативный сценарии расчёта Delta. Убедиться, что при активном параметре ForWorkingTime альтернативная логика даёт корректный результат, а качество вычислений соответствует ожиданиям.

Проведение бенчмаркингов и оптимизация:
Провести сравнительный анализ производительности новой альтернативной логики с использованием TimeMoment по сравнению с исходным алгоритмом. Ожидается сокращение времени выполнения, особенно для сложных расчётов, до 3–4 раз; дополнительно, оценить снижение потребления памяти в результате оптимизаций.

Обновление документации и уведомление пользователей:
Обновить официальную документацию модуля Kernel::System::DateTime, описав новые параметры метода Delta, способ активации альтернативной логики и преимущества использования TimeMoment. Подготовить информационное сообщение для пользователей, разъясняющее преимущества и условия работы новой функциональности.
